buildscript {
    ext {
        queryDslVersion = "5.0.0"
        aspectjVersion = "1.9.7"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.5'
}

group = 'moigae.common'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    //common file uploader
    implementation 'commons-fileupload:commons-fileupload:1.4'
    //simple json
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    //자바기반 이메일
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    //spring-context
    implementation 'org.springframework:spring-context-support:5.3.10'
    //javax mail
    implementation 'com.sun.mail:javax.mail:1.6.2'
    //Jsoup
    implementation 'org.jsoup:jsoup:1.14.3'
    //아파치 common io
    implementation 'commons-io:commons-io:2.8.0'
    //modelMapper
    implementation 'org.modelmapper:modelmapper:2.4.4'
    //스프링 부트 설정
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //타임리프 설정
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    //Datasource 설정
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.2'

    //QueryDSL 설정
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    //람북 설정
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //스프링 시큐리티
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //Junit5 설정
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'org.assertj:assertj-core:3.19.0'

    //h2 DB 설정
    testImplementation 'com.h2database:h2'

    // AWS S3
    implementation 'software.amazon.awssdk:s3:2.17.52'

    //Mokito 설정
    testImplementation 'org.mockito:mockito-core:3.12.4'

    //AspectJ dependency
    compile 'org.aspectj:aspectjweaver:' + aspectjVersion
}

tasks.named('test') {
    useJUnitPlatform()
}

// querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslDir]
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
// querydsl 추가 끝

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.enabled true
        html.destination file("${buildDir}/jacoco/index.html")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/dto/**',
                            '**/core/**',
                            '**/*Builder',
                            '**/*Builder.*',
                            '**/request/**',
                            '**/Q**',
                            '**/Index**',
                            '**/Conver**',
                            '**/MypageContro**',
                            '**/repository/**',
                            '**/meeting_user/**'
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    def Qdomains = []
    // 패키지 + 클래스명
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            excludes = [] + Qdomains // 제외할 Qdomains 패턴 추가
        }
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
}